'''
Application1: Interactive English Dictionary:

My solution could be improved by doing this line:
return "Did you mean %s instead?" % get_close_matches(word, data.keys())[0]

This line is a one liner instead of my two lines. I also did not know to use %.
I used a , (like in a print statement) within the return statement which threw an error message.

But overall I am content with my solution.
'''

import json
import difflib
from difflib import SequenceMatcher

words_data=json.load(open("data/words.json"))

def translate(word):
    word=word.lower()
    if word in words_data:
        return words_data[word]
    else:
        suggestions=difflib.get_close_matches(word, words_data.keys())
        print("Word not found. Did you mean:", suggestions[0]) #see top for comments on improvement
        text=input("y or n")
        if text.lower()=='y' or 'yes':
            return words_data[suggestions[0]]
        else:
            print("We do not understand.")
        #text=input("Error. Did you mean:", suggestions[0])

word=input("Enter a word:")
output=translate(word)

if type(output)==list:
    for item in output:
        print(item)
else:
    print(output)



'''
I originally tried using spellchecker but it was not preinstalled, and I found difflib was:
Here was my sample experiments using difflib as it was my first time using this import:
import json
import difflib
from difflib import SequenceMatcher

words_data=json.load(open("data/words.json"))
#I originally tried using spellchecker import but difflib was already preinstalled. 

#https://docs.python.org/3/library/difflib.html

#difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)

# difflib.get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy']) 
# difflib.get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy']) 
difflib.get_close_matches('appel', words_data.keys()) #['appeal', 'apparel', 'apply']
'''
