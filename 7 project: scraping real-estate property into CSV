'''
Project 8: Scraping Real Estate Property,
Turn into DataFrame
'''
import requests
from bs4 import BeautifulSoup
import pandas as pd

r = requests.get("http://www.pyclass.com/real-estate/rock-springs-wy/LCWYROCKSPRINGS/", headers={'User-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0'})
c=r.content
soup=BeautifulSoup(c, "html.parser")
divs=soup.find_all("div",{"class":"propertyRow"})

l=[]
for item in divs:
    d={}
    d["Address"]=item.find_all("span",{"class":"propAddressCollapse"})[0].text
    d["Locality"]=item.find_all("span", {"class":"propAddressCollapse"})[1].text
    d["Price"]=item.find("span", {"class":"propAddressCollapse"}).text.replace("\n","").replace(" ","")
    try:
        d["Beds"]=item.find("span",{"class":"infoBed"}).find("b").text
    except:
        d["Beds"]=None
    try:
        d["Full Baths"]=item.find("span",{"class":"infoValueFullBath"}).find("b").text
    except:
        d["Full Baths"]=None
    try:
        d["Half Baths"]=item.find("span",{"class":"infoValueHalfBath"}).find("b").text
    except:
         d["Half Baths"]=None
    
    for column_group in item.find_all("div",{"class":"columnGroup"}):
        for feature_group, feature_name in zip(column_group.find_all("span",{"class":"featureGroup"}), column_group.find_all("span",{"class":"featureName"})):
            if "Lot Size" in feature_group.text:
                d["Lot Size"]=feature_name.text
    l.append(d)
df=pd.DataFrame(l)
df


'''
'''
Project 8: Scraping Real Estate Property (original before turning into Pandas DataFrames(above):
'''
import requests
from bs4 import BeautifulSoup

r = requests.get("http://www.pyclass.com/real-estate/rock-springs-wy/LCWYROCKSPRINGS/", headers={'User-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0'})
c=r.content
soup=BeautifulSoup(c, "html.parser")
divs=soup.find_all("div",{"class":"propertyRow"})
#divs[0].find("h4",{"class":"propPrice"}).text.replace("\n","").replace(" ","")

#print(soup) #soup.prettify
for item in divs:
    print(item.find("h4",{"class":"propPrice"}).text.replace("\n","").replace(" ",""))
    print(item.find_all("span", {"class":"propAddressCollapse"})[0].text)
    print(item.find_all("span", {"class":"propAddressCollapse"})[1].text)
    try:
        print(item.find("span",{"class":"infoBed"}).text)
    except:
        print(None)
    try:
        print(item.find("span",{"class":"infoValueFullBath"}).find("b").text)
    except:
         print(None)
    try:
        print(item.find("span",{"class":"infoValueHalfBath"}).find("b").text)
    except:
         print(None)
    
    for column_group in item.find_all("div",{"class":"columnGroup"}):
        #print(column_group)
        for feature_group, feature_name in zip(column_group.find_all("span",{"class":"featureGroup"}), column_group.find_all("span",{"class":"featureName"})):
            if "Lot Size" in feature_group.text:
                print(feature_name.text)
    print(" ")
'''
