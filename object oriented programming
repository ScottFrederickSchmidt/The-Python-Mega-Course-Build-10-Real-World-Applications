'''
Object Oriented Programming, originally Python with DataBases:
'''

from backend import Database
import sqlite3

database=Database()

class Database:
    
    def __init__(self):
        self.conn=sqlite3.connect("books.db")
        self.cur=self.conn.cursor()
        self.cur.execute("CREATE TABLE IF NOT EXISTS store (item TEXT, quantity INTEGER, price REAL)")
        self.conn.commit()
        self.conn.close()

    def insert(self, item, quantity, price):
        self.cur.execute("CREATE TABLE IF NOT EXISTS store (item TEXT, quantity INTEGER, price REAL)")
        self.cur.execute("INSERT INTO store VALUES (?, ?, ?)", (item, quantity, price))
        self.conn.commit()
        self.conn.close()

    def view(self):
        self.cur.execute("SELECT * FROM store")
        rows=self.cur.fetchall()
        self.conn.close()
        return rows

    def delete(self, item):
        self.cur.execute("DELETE FROM store where item=?", (item, ))
        self.conn.commit()
        self.conn.close()
        return rows

    def update(self, quantity, price, item):
        self.cur.execute("UPDATE store SET quantity= ?, price=? WHERE item=?", (quantity, price, item))
        self.conn.commit()
        self.conn.close()
        return rows
    
    def __del__(self):
        self.conn.close()

update(11, 6, "Water Glass")
delete("Wine Glass")
print(view())


'''
Object Oriented Programming with Bank Account:
'''

class Account:
    def __init__(self, filepath):
        self.filepath=filepath
        with open(filepath, 'r') as file:
            self.balance=int(file.read() )
            
    def withdraw(self, amount):
        self.balance=self.balance-amount
        
    def deposit(self, amount):
        self.balance=self.balance+amount
    
    def commit(self):
        with open(filepath, 'w') as file:
            file.write(str(self.balance ))
            
class Checking(Acount):
    """This class generates checking account objects"""
    
    type="checking"
    def __init__(self, filepath, fee):
        Account.__init__(self, filepath)
        self.fee=fee
        
    def transfer(self, amount):
        self.balance=self.balance-amount - self.fee
        
jacks_checking=Checking("account\\jack.txt", 1)
jacks_checking.deposit(10)
jacks_checking.transfer(110)
print(jacks_checking.balance)
checking.commit()
print(jacks_checking.type)

tom_checking=Checking("account\\tom.txt", 1)
tom_checking.deposit(10)
tom_checking.transfer(110)
print(tom_checking.balance)
checking.commit()
            
'''
account=Account("data\balance.txt")
print(account.balance)
account.withdraw(100)
print(account.balance)
account.commit()
'''    

            
            
        
